# 리스트를 집합으로 set으로 감싸서 집합을 만들었다.
a1 = set([1, 2, 3])
# 아래와 같이 선언해도 위와 동일한 set이다.
a2 = {1, 2, 3}
print('set1 : ', a1)    # {1, 2, 3}
print('set1 type : ', type(a1))  # <class 'set'>
print('set2 : ', a2)    # {1, 2, 3}
print('set2 type : ', type(a2))  # <class 'set'>

# 집합은 데이터를 다룰 때 많이 사용한다.
a3 = [1, 2, 2, 3, 3]
a4 = list(set(a3))  # 중복을 제거하고 다시 리스트로 만든다.
print('중복제거 : ', a4)    # {1, 2, 3}

# 문자로 위와 같은 처리가 가능하다. (집합은 순서가 없다)
a5 = set('Hello')
print('문자의 중복제거 : ', a5)  # {'l', 'o', 'H', 'e'}

# add (집합에 값1개 추가)
a6 = set([1, 2, 3])
a6.add(4)
print('add : ', a6)    # {1, 2, 3, 4}

# update (집합에 값 여러개 추가)
a7 = {1, 2, 3}
a7.update([4, 5, 6])
print('update : ', a7)  # {1, 2, 3, 4, 5, 6}

# remove (집합에서 값 지우기)
a8 = {1, 2, 3, 4, 5, 6}
a8.remove(1)
print('remove : ', a8)  # {2, 3, 4, 5, 6}

# 교집합, 합집합, 차집합 예제 데이터 (python은 데이터를 처리하는 것이 강점이다.)
a9 = set([1, 2, 3, 4, 5, 6])
a10 = set([4, 5, 6, 7, 8, 9])

# 교집합 (서로 가진 값)
print('교집합 : ', a9 & a10)  # {4, 5, 6}
print('교집합 함수1 : ', a9.intersection(a10))    # {4, 5, 6}
print('교집합 함수2 : ', a10.intersection(a9))    # {4, 5, 6}

# 합집합 (전제에서 중복만 제거한 값)
print('합집합 : ', a9 | a10)  # {1, 2, 3, 4, 5, 6, 7, 8, 9}
print('합집합 함수1 : ', a9.union(a10))  # {1, 2, 3, 4, 5, 6, 7, 8, 9}
print('합집합 함수2 : ', a10.union(a9))  # {1, 2, 3, 4, 5, 6, 7, 8, 9}

# 차집합 (빼기를 했을 때 남는 부분의 값)
print('차집합1 : ', a9 - a10)    # {1, 2, 3}
print('차집합2 : ', a10 - a9)    # {8, 9, 7}
print('차집합 함수1 : ', a9.difference(a10))  # {1, 2, 3}
print('차집합 함수2 : ', a10.difference(a9))  # {8, 9, 7}
